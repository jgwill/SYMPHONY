
import React, { useContext, useState } from 'react';
import { AppContext } from '../App';
import { AppStep, DevelopmentPlan, PlanAction } from '../types';
import { FolderIcon, PlusCircleIcon, ArrowPathIcon as SpinnerIcon } from '../components'; // Using ArrowPathIcon as a spinner for consistency
import { githubService } from '../services/githubService'; // Updated import
import { cn } from '../lib/utils';

type SubmitStatus = {
  type: 'success' | 'error';
  message: string;
} | null;

const serializePlanToMarkdown = (plan: DevelopmentPlan): string => {
  let markdown = `# Development Plan: ${plan.title}\n\n`;
  
  const serializeActions = (actions: PlanAction[], level = 0): string => {
    let actionMd = '';
    actions.forEach(action => {
      actionMd += `${'  '.repeat(level)}- [${action.completed ? 'x' : ' '}] ${action.text}\n`;
      if (action.subActions && action.subActions.length > 0) {
        actionMd += serializeActions(action.subActions, level + 1);
      }
    });
    return actionMd;
  };

  plan.files.forEach(file => {
    markdown += `## File: \`${file.path}\`\n\n`;
    markdown += serializeActions(file.actions);
    markdown += '\n';
  });

  return markdown;
};


const CommitPage: React.FC = () => {
  const context = useContext(AppContext);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [submitStatus, setSubmitStatus] = useState<SubmitStatus>(null);

  const repoFullName = context?.selectedRepo ? `${context.selectedRepo.owner}/${context.selectedRepo.name}` : 'your-org/your-repo';
  const plan = context?.agentMemory.sharedContext.currentPlan;
  
  const implementedFiles = plan?.files.filter(f => f.status === 'implemented') || [];
  const defaultCommitTitle = `feat: Implement plan for "${plan?.title || 'new feature'}"`;
  
  const implementedFilePaths = implementedFiles.map(f => `- \`${f.path}\``).join('\n');
  const defaultCommitBody = `This commit was generated by the SYMPHONY AI Co-pilot.

It includes the development plan that guided the implementation and the resulting code changes.

**Implemented Files:**
${implementedFilePaths || 'None'}

**Based on conceptualization:**
${context?.agentMemory.sharedContext.initialConceptualizationText || "N/A"}`;


  const handleGitAction = async (actionType: 'createPR') => {
    if (!context || !context.selectedRepo || !plan) {
      setSubmitStatus({ type: 'error', message: "Repository context or a development plan is missing." });
      return;
    }
    
    setIsSubmitting(true);
    setSubmitStatus(null);

    const newBranchName = `ai-plan-${plan.title.toLowerCase().replace(/[^a-z0-9]/g, '-').substring(0, 20)}-${Date.now().toString().slice(-5)}`;
    const currentBranchName = 'main'; // Placeholder, ideally this would come from repo context

    try {
      let resultMessage = '';
      if (actionType === 'createPR') {
        const planMarkdown = serializePlanToMarkdown(plan);
        const filesToCommit = [{ path: 'SYMPHONY_PLAN.md', content: planMarkdown }];
        
        implementedFiles.forEach(file => {
            if (file.content) { // Ensure content is not null/undefined
                filesToCommit.push({ path: file.path, content: file.content });
            }
        });

        const pr = await githubService.createPullRequest(
          repoFullName,
          newBranchName,
          currentBranchName,
          defaultCommitTitle,
          defaultCommitTitle,
          defaultCommitBody,
          filesToCommit
        );

        resultMessage = pr.message || `Pull request created! You can view it at: ${pr.html_url}`;
      }
      
      setSubmitStatus({ type: 'success', message: resultMessage });
      setTimeout(() => {
        context.resetToStartSession();
      }, 5000); // Show success message for 5 seconds then reset

    } catch (error) {
      setSubmitStatus({ type: 'error', message: (error as Error).message });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const renderButtonContent = (text: string, defaultIcon: React.ReactNode) => {
    if (isSubmitting) {
      return (
        <>
          <SpinnerIcon className="w-4 h-4 sm:w-5 sm:h-5 mr-2 animate-spin" />
          Submitting...
        </>
      );
    }
    return <>{defaultIcon} {text}</>;
  };


  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto flex flex-col items-center justify-center h-full">
      <h1 className="text-2xl sm:text-3xl font-bold text-slate-100 mb-5 sm:mb-6 text-center">Finalize & Commit Changes</h1>
      
      {submitStatus && (
        <div 
          className={cn(
            "w-full p-3 mb-4 rounded-md text-sm text-center",
            submitStatus.type === 'success' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
          )}
          role={submitStatus.type === 'error' ? 'alert' : 'status'}
        >
          {submitStatus.message}
        </div>
      )}

      <div className="bg-slate-800 p-4 sm:p-6 rounded-lg shadow-xl w-full space-y-4">
        <button 
          onClick={() => handleGitAction('createPR')}
          disabled={isSubmitting || !context?.selectedRepo || !plan}
          className="w-full flex items-center justify-center space-x-2 sm:space-x-3 p-3 bg-cyan-600 hover:bg-cyan-500 text-white rounded-md transition-colors text-sm sm:text-base text-left focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-slate-800 focus-visible:ring-cyan-400 disabled:opacity-60 disabled:cursor-not-allowed"
          title={!plan ? "A development plan must be generated first" : "Create a Pull Request with the plan and implemented code"}
        >
          {renderButtonContent("Create Pull Request (new branch)", <PlusCircleIcon className="w-5 h-5 sm:w-6 sm:h-6 flex-shrink-0" />)}
        </button>
        <p className="text-xs text-slate-400 px-1 -mt-2">Recommended. Creates a new branch, commits the plan and all implemented code, and opens a PR.</p>


        <button 
          disabled={true}
          className="w-full flex items-center justify-center space-x-2 sm:space-x-3 p-3 bg-slate-700 hover:bg-slate-600 text-slate-500 rounded-md transition-colors text-sm sm:text-base text-left disabled:opacity-60 disabled:cursor-not-allowed"
          title="Direct push functionality coming soon"
        >
          {renderButtonContent("Push to current branch (main)", <FolderIcon className="w-5 h-5 sm:w-6 sm:h-6 flex-shrink-0" />)}
        </button>
         <p className="text-xs text-slate-400 px-1 -mt-2">Pushes changes directly to the 'main' branch (or current primary). (Coming Soon)</p>


        <button 
          disabled={true}
          className="w-full flex items-center justify-center space-x-2 sm:space-x-3 p-3 bg-slate-700 hover:bg-slate-600 text-slate-500 rounded-md transition-colors text-sm sm:text-base text-left disabled:opacity-60 disabled:cursor-not-allowed"
           title="Direct push functionality coming soon"
        >
          {renderButtonContent("Push to new branch", <FolderIcon className="w-5 h-5 sm:w-6 sm:h-6 flex-shrink-0" />)}
        </button>
        <p className="text-xs text-slate-400 px-1 -mt-2">Creates a new branch and pushes changes, no automatic PR. (Coming Soon)</p>
        
      </div>
      {!isSubmitting && !submitStatus && (!context || !context.selectedRepo || !plan) && (
         <p className="text-yellow-400 text-sm mt-4 text-center">
            Warning: { !context?.selectedRepo ? "No repository selected." : "No active development plan." } Please start a session and generate a plan.
          </p>
      )}
    </div>
  );
};
CommitPage.displayName = 'CommitPage';

export default CommitPage;